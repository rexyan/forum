<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yanrs.cloud.article.mapper.ArticleCommentMapper">
  <resultMap id="BaseResultMap" type="com.yanrs.cloud.article.bean.ArticleComment">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt" />
    <result column="article_id" jdbcType="INTEGER" property="articleId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="parent_id" jdbcType="INTEGER" property="parentId" />
    <result column="disagree" jdbcType="INTEGER" property="disagree" />
    <result column="agree" jdbcType="INTEGER" property="agree" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yanrs.cloud.article.bean.ArticleComment">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_at, update_at, article_id, user_id, parent_id, disagree, agree
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  
  <!-- getArticleCommontCount -->
  <select id="getArticleCommontCount" resultType="Integer">
  	SELECT count(1) from article_comment WHERE article_id = #{id}
  </select>
  
  
  <select id="selectByExampleWithBLOBs" parameterType="com.yanrs.cloud.article.bean.ArticleCommentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yanrs.cloud.article.bean.ArticleCommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from article_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article_comment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from article_comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.yanrs.cloud.article.bean.ArticleCommentExample">
    delete from article_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yanrs.cloud.article.bean.ArticleComment">
    insert into article_comment (id, create_at, update_at, 
      article_id, user_id, parent_id, 
      disagree, agree, content
      )
    values (#{id,jdbcType=INTEGER}, #{createAt,jdbcType=TIMESTAMP}, #{updateAt,jdbcType=TIMESTAMP}, 
      #{articleId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{parentId,jdbcType=INTEGER}, 
      #{disagree,jdbcType=INTEGER}, #{agree,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yanrs.cloud.article.bean.ArticleComment">
    insert into article_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createAt != null">
        create_at,
      </if>
      <if test="updateAt != null">
        update_at,
      </if>
      <if test="articleId != null">
        article_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="disagree != null">
        disagree,
      </if>
      <if test="agree != null">
        agree,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="createAt != null">
        #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateAt != null">
        #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="articleId != null">
        #{articleId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="disagree != null">
        #{disagree,jdbcType=INTEGER},
      </if>
      <if test="agree != null">
        #{agree,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yanrs.cloud.article.bean.ArticleCommentExample" resultType="java.lang.Long">
    select count(*) from article_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update article_comment
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.createAt != null">
        create_at = #{record.createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateAt != null">
        update_at = #{record.updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.articleId != null">
        article_id = #{record.articleId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.parentId != null">
        parent_id = #{record.parentId,jdbcType=INTEGER},
      </if>
      <if test="record.disagree != null">
        disagree = #{record.disagree,jdbcType=INTEGER},
      </if>
      <if test="record.agree != null">
        agree = #{record.agree,jdbcType=INTEGER},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update article_comment
    set id = #{record.id,jdbcType=INTEGER},
      create_at = #{record.createAt,jdbcType=TIMESTAMP},
      update_at = #{record.updateAt,jdbcType=TIMESTAMP},
      article_id = #{record.articleId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      parent_id = #{record.parentId,jdbcType=INTEGER},
      disagree = #{record.disagree,jdbcType=INTEGER},
      agree = #{record.agree,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update article_comment
    set id = #{record.id,jdbcType=INTEGER},
      create_at = #{record.createAt,jdbcType=TIMESTAMP},
      update_at = #{record.updateAt,jdbcType=TIMESTAMP},
      article_id = #{record.articleId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      parent_id = #{record.parentId,jdbcType=INTEGER},
      disagree = #{record.disagree,jdbcType=INTEGER},
      agree = #{record.agree,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yanrs.cloud.article.bean.ArticleComment">
    update article_comment
    <set>
      <if test="createAt != null">
        create_at = #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateAt != null">
        update_at = #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="articleId != null">
        article_id = #{articleId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="disagree != null">
        disagree = #{disagree,jdbcType=INTEGER},
      </if>
      <if test="agree != null">
        agree = #{agree,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yanrs.cloud.article.bean.ArticleComment">
    update article_comment
    set create_at = #{createAt,jdbcType=TIMESTAMP},
      update_at = #{updateAt,jdbcType=TIMESTAMP},
      article_id = #{articleId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      parent_id = #{parentId,jdbcType=INTEGER},
      disagree = #{disagree,jdbcType=INTEGER},
      agree = #{agree,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yanrs.cloud.article.bean.ArticleComment">
    update article_comment
    set create_at = #{createAt,jdbcType=TIMESTAMP},
      update_at = #{updateAt,jdbcType=TIMESTAMP},
      article_id = #{articleId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      parent_id = #{parentId,jdbcType=INTEGER},
      disagree = #{disagree,jdbcType=INTEGER},
      agree = #{agree,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>